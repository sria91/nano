# Sample initialization file for GNU nano
# Please note that you must have configured nano with 
# --enable-nanorc for this file to be read!
#
# To make sure a value is not enabled, use "unset <option>"

# Use auto-indentation
# set autoindent

# Backup files to filename~
# set backup

# Constantly update the cursor position
# set const

# Use cut to end of line with ^K by default
# set cut

# Use this value instead of the default
# An out-of-range negative value can make nano die complaining that the
# screen is too small
# set fill -8

# Use alternate keypad routines
# set keypad

# Allow multiple file buffers (using ^R inserts into separate buffer)
# You must have configured with --enable-multibuffer or --enable-extra
# for this to work
#
# set multibuffer

# Don't convert files from DOS/Mac format
# set noconvert

# Don't follow symlinks when writing files
# set nofollow

# Don't display the help lists at the bottom of the screen
# set nohelp

# Don't wrap text at all
# set nowrap

# Set operating directory (chroot of sorts)
# set operatingdir "~"

# Use Pico Compatibility mode for the shortcut lists and search text
# set pico

# The email-quote string.  This is a "regular expression" if your
# system supports them, otherwise a literal string.  Default
# set quotestr "^([ \t]*[|>:}#])+" if you have regexps, otherwise
# set quotestr "> ".
# You can get old nano quoted-justify behavior via:
# set quotestr "(> )+"

# Do regular expression searches by default 
# set regexp

# Use smooth scrolling as the default
# set smooth

# Use this spelling checker instead of the default one
# set speller aspell

# Allow nano to be suspended with ^Z
# set suspend

# Use this tab size instead of the default; it must be greater than 0
# set tabsize 4

# Save automatically on exit, don't prompt
# set tempfile

# Disallow file modification, why would you want this in an rc file? ;)
# set view

# Color setup
# Format: 
# syntax "short description" ["filename regex" ...]
# color foreground,background "regex" ["regex"...]
#
# Legal colors are: white, black, red, blue, green, yellow, purple,
# cyan.  You may use the prefix "bright" to mean a stronger color
# highlight.
#
# To use multi-line regexes use the start="regex" end="regex" format.
#
# If your system supports transparency, not specifying a background
# color will use a transparent color.  If you don't want this, be sure
# to set the background color to black or white.

# syntax "c-file" ".*\.c$" ".*\.h$"
# color red "\<[A-Z_]{2,}\>" 
# color green "\<float\>" "\<char\>" "\<int\>" "\<void\>"
# color green "\<static\>" "\<const\>" "\<struct\>" 
# color brightyellow "\<if\>" "\<while\>" "\<do\>" "\<else\>" "\<case\>" "\<switch\>"
# color brightcyan "#define" "#include" "#ifn*def" "#endif" 
# color brightcyan "#elif" "#else" "#if"

# You will in general want your comments and strings to come last,
# because syntax highlighting rules will be applied in the order they
# are read in.  Note that quotes in regexes should not be escaped (use "
# instead of \").

# color brightyellow "<[^= ]*>" ""(\\.|[^\"])*""
# color brightyellow start=""(\\.|[^\"])*\\( |	)*$" end="^(\\.|[^\"])*""
# color brightblue "//.*"
# color brightblue start="/\*" end="\*/"

# Here are some short examples for TeX files and HTML
# syntax "HTML" "\.html$"
#
# color blue start="<" end=">"
# color red "&([^; ])*;"
#
# syntax "TeX" "\.tex$"
#
# color green "\\(.|([A-Za-z]*))"
# color magenta "\{" "\}"
# color blue "%.*"

# For this you will probably want to set your editor to "nano -Y mutt"

# syntax "mutt"
# color green "^>.*"

